{
  "version": "1.0.0",
  "lastUpdate": "2024-01-15",
  "category": "中间件",
  "topics": [
    {
      "id": "message-queue",
      "name": "消息队列专题",
      "questions": [
        {
          "id": 1,
          "title": "消息队列的应用场景有哪些？",
          "answer": "【消息队列应用场景】\n1. 异步处理：耗时操作异步化，提升响应速度\n2. 削峰填谷：流量高峰期缓冲，避免系统过载\n3. 解耦系统：服务间松耦合，提高可维护性\n4. 流量控制：控制消费速率，保护下游系统\n5. 数据同步：跨系统数据同步\n6. 事件驱动：基于事件的系统架构\n\n【具体场景】\n- 订单系统：下单后异步处理库存、支付、物流\n- 日志系统：日志异步写入，不影响主流程\n- 通知系统：邮件、短信异步发送\n- 数据同步：缓存更新、数据备份\n- 任务调度：定时任务、批量处理\n\n【优势】\n- 提高系统吞吐量\n- 增强系统可靠性\n- 简化系统架构\n- 支持水平扩展"
        },
        {
          "id": 2,
          "title": "Kafka、RabbitMQ、RocketMQ 的区别？",
          "answer": "【Kafka特点】\n- 高吞吐量：单机可达百万级TPS\n- 分布式存储：数据持久化到磁盘\n- 顺序保证：分区内消息有序\n- 适用场景：日志收集、流处理、大数据\n\n【RabbitMQ特点】\n- 功能丰富：支持多种交换机类型\n- 协议支持：AMQP、MQTT、STOMP等\n- 管理界面：提供Web管理界面\n- 适用场景：传统企业应用、微服务通信\n\n【RocketMQ特点】\n- 阿里开源：国内使用广泛\n- 事务消息：支持分布式事务\n- 延迟消息：支持定时消息\n- 适用场景：电商、金融、游戏\n\n【选择建议】\n- 大数据场景选Kafka\n- 传统企业选RabbitMQ\n- 国内项目选RocketMQ"
        },
        {
          "id": 3,
          "title": "如何保证消息队列的可靠性和幂等性？",
          "answer": "【可靠性保证】\n1. 消息持久化：消息写入磁盘\n2. 确认机制：生产者确认、消费者确认\n3. 重试机制：失败消息自动重试\n4. 死信队列：无法处理的消息进入死信队列\n5. 监控告警：实时监控队列状态\n\n【幂等性保证】\n1. 唯一ID：每条消息分配唯一ID\n2. 数据库约束：利用唯一索引\n3. 状态机：基于状态判断是否处理\n4. 分布式锁：防止重复处理\n5. 去重表：记录已处理消息ID\n\n【代码示例】\n```java\n// 幂等性处理\n@Transactional\npublic void processMessage(String messageId, String content) {\n    // 检查是否已处理\n    if (processedMessageService.isProcessed(messageId)) {\n        return;\n    }\n    \n    // 处理消息\n    businessService.process(content);\n    \n    // 标记已处理\n    processedMessageService.markProcessed(messageId);\n}\n```\n\n【最佳实践】\n- 消息ID全局唯一\n- 消费者幂等设计\n- 合理设置重试次数\n- 监控死信队列"
        },
        {
          "id": 4,
          "title": "消息队列如何实现延迟队列？",
          "answer": "【延迟队列实现方案】\n1. 定时轮询：定期扫描到期消息\n2. 时间轮算法：高效的时间调度算法\n3. 延迟消息：消息队列原生支持\n4. 外部调度：使用定时任务调度\n\n【时间轮算法】\n```java\n// 时间轮实现\npublic class TimeWheel {\n    private final long tickMs; // 每格时间间隔\n    private final int wheelSize; // 时间轮大小\n    private final long interval; // 时间轮总间隔\n    private final List<TimerTaskList> buckets; // 时间格\n}\n```\n\n【RocketMQ延迟消息】\n```java\n// 发送延迟消息\nMessage msg = new Message(\"topic\", \"tag\", \"key\", \"body\".getBytes());\nmsg.setDelayTimeLevel(3); // 延迟级别\nproducer.send(msg);\n```\n\n【Redis实现】\n```java\n// 使用Redis ZSet实现\nredisTemplate.opsForZSet().add(\"delay_queue\", message, expireTime);\n\n// 定时任务扫描\nSet<String> messages = redisTemplate.opsForZSet()\n    .rangeByScore(\"delay_queue\", 0, System.currentTimeMillis());\n```\n\n【应用场景】\n- 订单超时取消\n- 定时任务调度\n- 延迟通知\n- 重试机制"
        }
      ]
    },
    {
      "id": "nginx",
      "name": "Nginx专题",
      "questions": [
        {
          "id": 5,
          "title": "Nginx 的常见应用场景？",
          "answer": "【Nginx应用场景】\n1. 反向代理：隐藏后端服务器，提供统一入口\n2. 负载均衡：分发请求到多个后端服务器\n3. 静态资源服务：提供静态文件访问\n4. 缓存：缓存静态资源，提升访问速度\n5. SSL终端：处理HTTPS加密解密\n6. 限流：控制请求频率，保护后端服务\n7. 日志记录：记录访问日志和错误日志\n\n【配置示例】\n```nginx\n# 反向代理配置\nserver {\n    listen 80;\n    server_name example.com;\n    \n    location / {\n        proxy_pass http://backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n【优势】\n- 高性能：事件驱动，非阻塞IO\n- 高并发：单机支持数万并发连接\n- 低内存：内存占用少\n- 高可靠性：稳定运行\n\n【使用场景】\n- Web服务器\n- API网关\n- CDN节点\n- 微服务入口"
        },
        {
          "id": 6,
          "title": "Nginx 如何实现负载均衡？",
          "answer": "【负载均衡算法】\n1. 轮询（默认）：按顺序分发请求\n2. 权重轮询：根据权重分发请求\n3. IP哈希：根据客户端IP分发\n4. 最少连接：分发到连接数最少的服务器\n5. URL哈希：根据请求URL分发\n6. 响应时间：分发到响应最快的服务器\n\n【配置示例】\n```nginx\n# 定义上游服务器组\nupstream backend {\n    # 轮询\n    server 192.168.1.10:8080;\n    server 192.168.1.11:8080;\n    \n    # 权重轮询\n    server 192.168.1.12:8080 weight=3;\n    \n    # 健康检查\n    server 192.168.1.13:8080 max_fails=3 fail_timeout=30s;\n}\n\n# 负载均衡配置\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://backend;\n    }\n}\n```\n\n【健康检查】\n- max_fails：最大失败次数\n- fail_timeout：失败超时时间\n- backup：备用服务器\n\n【会话保持】\n- ip_hash：基于IP的会话保持\n- sticky：基于Cookie的会话保持\n\n【监控】\n- 实时监控后端服务器状态\n- 自动剔除故障服务器\n- 故障恢复后自动加入"
        },
        {
          "id": 7,
          "title": "Nginx 如何做动静分离？",
          "answer": "【动静分离原理】\n将静态资源（CSS、JS、图片等）和动态请求分离处理，静态资源由Nginx直接处理，动态请求转发到后端服务器。\n\n【配置示例】\n```nginx\nserver {\n    listen 80;\n    server_name example.com;\n    root /var/www/html;\n    \n    # 静态资源处理\n    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n    \n    # 动态请求转发\n    location /api/ {\n        proxy_pass http://backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n    \n    # 其他请求转发\n    location / {\n        try_files $uri $uri/ @backend;\n    }\n    \n    location @backend {\n        proxy_pass http://backend;\n    }\n}\n```\n\n【优化策略】\n1. 缓存策略：设置合适的缓存时间\n2. 压缩：启用gzip压缩\n3. 缓存头：设置Cache-Control\n4. 日志：静态资源关闭访问日志\n\n【优势】\n- 提升静态资源访问速度\n- 减轻后端服务器压力\n- 提高系统整体性能\n- 简化缓存管理\n\n【最佳实践】\n- 合理设置缓存时间\n- 使用CDN加速\n- 监控缓存命中率\n- 定期清理过期缓存"
        }
      ]
    },
    {
      "id": "zookeeper",
      "name": "ZooKeeper专题",
      "questions": [
        {
          "id": 8,
          "title": "ZooKeeper 的作用和原理？",
          "answer": "【ZooKeeper作用】\n1. 配置管理：集中管理配置信息\n2. 服务注册与发现：服务地址注册和查找\n3. 分布式锁：实现分布式环境下的互斥\n4. 集群管理：监控集群节点状态\n5. 命名服务：提供统一的命名空间\n6. 分布式协调：协调分布式系统行为\n\n【核心原理】\n1. 数据模型：类似文件系统的树形结构\n2. 节点类型：持久节点、临时节点、顺序节点\n3. 一致性协议：ZAB协议保证数据一致性\n4. 观察者模式：客户端监听节点变化\n\n【ZAB协议】\n1. 原子广播：确保所有节点收到相同消息\n2. 崩溃恢复：处理节点故障\n3. 消息广播：处理正常请求\n\n【节点类型】\n```java\n// 持久节点\nzk.create(\"/config/app\", \"value\".getBytes(), \n    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n// 临时节点\nzk.create(\"/services/service1\", \"192.168.1.10:8080\".getBytes(), \n    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n\n// 顺序节点\nzk.create(\"/locks/lock-\", \"\".getBytes(), \n    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n```\n\n【应用场景】\n- 分布式配置中心\n- 服务注册中心\n- 分布式锁\n- 集群管理\n- 分布式协调"
        },
        {
          "id": 9,
          "title": "ZooKeeper 如何实现分布式锁？",
          "answer": "【ZooKeeper分布式锁原理】\n利用ZooKeeper的临时顺序节点特性实现分布式锁，通过创建临时顺序节点，序号最小的节点获得锁。\n\n【实现步骤】\n1. 创建临时顺序节点\n2. 检查是否为最小序号节点\n3. 如果是，获得锁；如果不是，监听前一个节点\n4. 释放锁时删除节点\n\n【代码实现】\n```java\npublic class ZKDistributedLock {\n    private ZooKeeper zk;\n    private String lockPath;\n    private String lockNode;\n    \n    public boolean tryLock() {\n        try {\n            // 创建临时顺序节点\n            lockNode = zk.create(lockPath + \"/lock-\", \"\".getBytes(), \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n            \n            // 获取所有子节点\n            List<String> children = zk.getChildren(lockPath, false);\n            Collections.sort(children);\n            \n            // 检查是否为最小序号\n            String lockName = lockNode.substring(lockNode.lastIndexOf(\"/\") + 1);\n            if (lockName.equals(children.get(0))) {\n                return true; // 获得锁\n            }\n            \n            // 监听前一个节点\n            String prevNode = children.get(children.indexOf(lockName) - 1);\n            zk.exists(lockPath + \"/\" + prevNode, new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                    if (event.getType() == Event.EventType.NodeDeleted) {\n                        // 前一个节点删除，尝试获取锁\n                        tryLock();\n                    }\n                }\n            });\n            \n            return false;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    \n    public void unlock() {\n        try {\n            zk.delete(lockNode, -1);\n        } catch (Exception e) {\n            // 处理异常\n        }\n    }\n}\n```\n\n【优势】\n- 自动释放：临时节点自动删除\n- 顺序保证：顺序节点保证公平性\n- 监听机制：自动唤醒等待线程\n- 高可用：ZooKeeper集群保证可用性\n\n【注意事项】\n- 网络分区问题\n- 时钟同步问题\n- 性能考虑\n- 锁粒度设计"
        }
      ]
    },
    {
      "id": "transaction",
      "name": "分布式事务专题",
      "questions": [
        {
          "id": 10,
          "title": "分布式事务的实现方式有哪些？",
          "answer": "【分布式事务实现方式】\n1. 两阶段提交（2PC）：协调者协调所有参与者\n2. 三阶段提交（3PC）：在2PC基础上增加超时机制\n3. TCC模式：Try-Confirm-Cancel三步操作\n4. SAGA模式：长事务拆分为本地事务+补偿\n5. 消息最终一致性：通过消息队列保证\n6. 本地消息表：本地事务+消息表\n\n【2PC实现】\n```java\n// 第一阶段：准备阶段\npublic boolean prepare() {\n    try {\n        // 预扣减库存\n        inventoryService.preDeduct(productId, quantity);\n        // 预扣减余额\n        accountService.preDeduct(userId, amount);\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}\n\n// 第二阶段：提交阶段\npublic void commit() {\n    try {\n        // 确认扣减库存\n        inventoryService.confirmDeduct(productId, quantity);\n        // 确认扣减余额\n        accountService.confirmDeduct(userId, amount);\n    } catch (Exception e) {\n        // 回滚操作\n        rollback();\n    }\n}\n```\n\n【TCC模式】\n```java\n// Try阶段：资源预留\n@Transactional\npublic boolean tryReserve(Long orderId, Long productId, Integer quantity) {\n    // 预留库存\n    return inventoryService.reserve(productId, quantity);\n}\n\n// Confirm阶段：确认操作\n@Transactional\npublic void confirmReserve(Long orderId, Long productId, Integer quantity) {\n    // 确认扣减库存\n    inventoryService.confirm(productId, quantity);\n}\n\n// Cancel阶段：取消操作\n@Transactional\npublic void cancelReserve(Long orderId, Long productId, Integer quantity) {\n    // 释放预留库存\n    inventoryService.release(productId, quantity);\n}\n```\n\n【选择建议】\n- 强一致性：2PC\n- 最终一致性：TCC、SAGA\n- 简单场景：消息最终一致性\n- 复杂场景：SAGA模式"
        },
        {
          "id": 11,
          "title": "中间件高可用与容灾方案？",
          "answer": "【高可用架构】\n1. 主从复制：一主多从，读写分离\n2. 集群模式：多节点集群，负载均衡\n3. 哨兵模式：自动故障检测和切换\n4. 分片模式：数据分片，水平扩展\n\n【容灾方案】\n1. 同城双活：同一城市两个数据中心\n2. 异地多活：不同城市多个数据中心\n3. 异地容灾：主备数据中心\n4. 云原生：多可用区部署\n\n【Redis高可用】\n```redis\n# 主从配置\nslaveof 192.168.1.10 6379\n\n# 哨兵配置\nsentinel monitor mymaster 192.168.1.10 6379 2\nsentinel down-after-milliseconds mymaster 5000\nsentinel failover-timeout mymaster 10000\n\n# 集群配置\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\n```\n\n【MySQL高可用】\n```sql\n-- 主从复制配置\nCHANGE MASTER TO\n  MASTER_HOST=\"192.168.1.10\",\n  MASTER_PORT=3306,\n  MASTER_USER=\"repl\",\n  MASTER_PASSWORD=\"password\",\n  MASTER_LOG_FILE=\"mysql-bin.000001\",\n  MASTER_LOG_POS=154;\n\nSTART SLAVE;\n```\n\n【监控告警】\n1. 健康检查：定期检查服务状态\n2. 性能监控：监控关键指标\n3. 告警通知：多渠道告警\n4. 自动恢复：故障自动处理\n\n【最佳实践】\n- 多机房部署\n- 自动故障切换\n- 数据备份策略\n- 灾难恢复演练\n- 监控告警完善"
        }
      ]
    }
  ]
} 