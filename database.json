{
  "version": "1.0.0",
  "lastUpdate": "2024-01-15",
  "category": "数据库",
  "topics": [
    {
      "id": "mysql",
      "name": "MySQL专题",
      "questions": [
        {
          "id": 1,
          "title": "MySQL的索引原理和优化？",
          "answer": "【索引原理】\nMySQL主要使用B+树索引，具有以下特点：\n- 非叶子节点只存储键值\n- 叶子节点存储完整记录\n- 叶子节点通过链表连接\n\n【索引类型】\n1. 主键索引：唯一且非空\n2. 唯一索引：唯一但不非空\n3. 普通索引：允许重复\n4. 复合索引：多个字段组合\n5. 全文索引：用于文本搜索\n\n【索引优化】\n```sql\n-- 创建索引\nCREATE INDEX idx_name ON users(name);\nCREATE INDEX idx_age_name ON users(age, name);\n\n-- 查看索引使用情况\nEXPLAIN SELECT * FROM users WHERE name = 'John';\n\n-- 索引失效情况\nSELECT * FROM users WHERE name LIKE '%John%';  -- 前缀模糊查询\nSELECT * FROM users WHERE age + 1 = 25;        -- 字段运算\nSELECT * FROM users WHERE name IS NULL;        -- NULL值查询\n```\n\n【复合索引最左前缀】\n```sql\n-- 创建复合索引\nCREATE INDEX idx_age_name_city ON users(age, name, city);\n\n-- 有效查询\nSELECT * FROM users WHERE age = 25;                    -- 使用索引\nSELECT * FROM users WHERE age = 25 AND name = 'John';  -- 使用索引\nSELECT * FROM users WHERE age = 25 AND city = 'NY';    -- 部分使用索引\n\n-- 无效查询\nSELECT * FROM users WHERE name = 'John';               -- 不使用索引\nSELECT * FROM users WHERE city = 'NY';                 -- 不使用索引\n```\n\n【索引选择策略】\n- 查询条件：WHERE、JOIN、ORDER BY、GROUP BY\n- 选择性：唯一值比例高的字段\n- 更新频率：避免在频繁更新的字段上建索引\n- 表大小：小表可能不需要索引"
        },
        {
          "id": 2,
          "title": "MySQL的事务和锁机制？",
          "answer": "【事务特性(ACID)】\n- 原子性(Atomicity)：事务不可分割\n- 一致性(Consistency)：数据状态一致\n- 隔离性(Isolation)：事务间相互隔离\n- 持久性(Durability)：事务提交后永久保存\n\n【隔离级别】\n1. READ UNCOMMITTED：读未提交\n2. READ COMMITTED：读已提交\n3. REPEATABLE READ：可重复读（MySQL默认）\n4. SERIALIZABLE：串行化\n\n【锁类型】\n```sql\n-- 行级锁\nSELECT * FROM users WHERE id = 1 FOR UPDATE;  -- 排他锁\nSELECT * FROM users WHERE id = 1 LOCK IN SHARE MODE;  -- 共享锁\n\n-- 表级锁\nLOCK TABLES users WRITE;\n-- 操作\nUNLOCK TABLES;\n```\n\n【死锁处理】\n```sql\n-- 查看死锁信息\nSHOW ENGINE INNODB STATUS;\n\n-- 设置死锁超时\nSET innodb_lock_wait_timeout = 50;\n\n-- 避免死锁策略\n-- 1. 按固定顺序访问表\n-- 2. 使用短事务\n-- 3. 避免长事务\n```\n\n【MVCC机制】\n- 多版本并发控制\n- 通过undo log实现\n- 每个事务看到的数据版本不同\n- 提高并发性能"
        },
        {
          "id": 3,
          "title": "MySQL的分库分表策略？",
          "answer": "【分库分表原因】\n- 单表数据量过大\n- 单库连接数限制\n- 提高查询性能\n- 便于维护\n\n【分库策略】\n1. 垂直分库：按业务模块分库\n2. 水平分库：按数据范围分库\n\n【分表策略】\n1. 垂直分表：按字段分表\n2. 水平分表：按数据范围分表\n\n【分片算法】\n```sql\n-- 哈希分片\nCREATE TABLE users_0 (id INT, name VARCHAR(50));\nCREATE TABLE users_1 (id INT, name VARCHAR(50));\nCREATE TABLE users_2 (id INT, name VARCHAR(50));\n\n-- 分片规则：id % 3\nINSERT INTO users_0 SELECT * FROM users WHERE id % 3 = 0;\nINSERT INTO users_1 SELECT * FROM users WHERE id % 3 = 1;\nINSERT INTO users_2 SELECT * FROM users WHERE id % 3 = 2;\n```\n\n【时间分片】\n```sql\n-- 按月分表\nCREATE TABLE orders_202401 (id INT, order_date DATE, amount DECIMAL(10,2));\nCREATE TABLE orders_202402 (id INT, order_date DATE, amount DECIMAL(10,2));\n\n-- 查询时指定表\nSELECT * FROM orders_202401 WHERE order_date >= '2024-01-01';\n```\n\n【分库分表挑战】\n- 跨库JOIN查询\n- 分布式事务\n- 全局ID生成\n- 数据一致性\n- 运维复杂度"
        }
      ]
    },
    {
      "id": "redis",
      "name": "Redis专题",
      "questions": [
        {
          "id": 4,
          "title": "Redis的数据类型和应用场景？",
          "answer": "【数据类型】\n1. String：字符串\n2. Hash：哈希表\n3. List：列表\n4. Set：集合\n5. Sorted Set：有序集合\n6. Stream：流（Redis 5.0+）\n\n【String应用】\n```redis\n# 缓存\nSET user:1:name \"John\"\nSET user:1:age \"25\"\nGET user:1:name\n\n# 计数器\nINCR page_views\nINCRBY page_views 10\n\n# 分布式锁\nSET lock:resource \"token\" NX PX 30000\n```\n\n【Hash应用】\n```redis\n# 用户信息\nHSET user:1 name \"John\" age \"25\" email \"john@example.com\"\nHGET user:1 name\nHGETALL user:1\n\n# 购物车\nHSET cart:user1 product1 \"2\" product2 \"1\"\nHINCRBY cart:user1 product1 1\n```\n\n【List应用】\n```redis\n# 消息队列\nLPUSH queue:emails \"email1\"\nLPUSH queue:emails \"email2\"\nRPOP queue:emails\n\n# 最新动态\nLPUSH user:1:timeline \"post1\"\nLPUSH user:1:timeline \"post2\"\nLRANGE user:1:timeline 0 9\n```\n\n【Set应用】\n```redis\n# 用户标签\nSADD user:1:tags \"tech\" \"programming\" \"redis\"\nSADD user:2:tags \"tech\" \"design\"\nSINTER user:1:tags user:2:tags  # 共同标签\n\n# 唯一访问者\nSADD daily_visitors \"192.168.1.1\"\nSCARD daily_visitors  # 访问者数量\n```\n\n【Sorted Set应用】\n```redis\n# 排行榜\nZADD leaderboard 100 \"player1\"\nZADD leaderboard 200 \"player2\"\nZREVRANGE leaderboard 0 9 WITHSCORES\n\n# 时间排序\nZADD events 1640995200 \"event1\"\nZADD events 1640998800 \"event2\"\nZRANGEBYSCORE events 1640995200 1640998800\n```"
        },
        {
          "id": 5,
          "title": "Redis的持久化和主从复制？",
          "answer": "【持久化方式】\n1. RDB：快照持久化\n2. AOF：日志持久化\n3. 混合持久化：RDB+AOF\n\n【RDB配置】\n```redis\n# redis.conf\nsave 900 1      # 900秒内至少1个key变化\nsave 300 10     # 300秒内至少10个key变化\nsave 60 10000   # 60秒内至少10000个key变化\n\n# 手动触发\nBGSAVE\nSAVE\n```\n\n【AOF配置】\n```redis\n# redis.conf\nappendonly yes\nappendfsync always    # 每次写入都同步\nappendfsync everysec  # 每秒同步一次\nappendfsync no        # 由操作系统决定\n\n# AOF重写\nBGREWRITEAOF\n```\n\n【主从复制】\n```redis\n# 主节点配置\n# redis.conf\nbind 0.0.0.0\nport 6379\n\n# 从节点配置\n# redis.conf\nslaveof 192.168.1.10 6379\nslave-read-only yes\n\n# 查看复制状态\nINFO replication\n```\n\n【哨兵模式】\n```redis\n# sentinel.conf\nsentinel monitor mymaster 192.168.1.10 6379 2\nsentinel down-after-milliseconds mymaster 5000\nsentinel failover-timeout mymaster 10000\nsentinel parallel-syncs mymaster 1\n\n# 启动哨兵\nredis-sentinel sentinel.conf\n```\n\n【集群模式】\n```redis\n# 集群配置\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\ncluster-require-full-coverage no\n\n# 创建集群\nredis-cli --cluster create 192.168.1.10:7000 192.168.1.11:7000 192.168.1.12:7000\n```"
        }
      ]
    },
    {
      "id": "elasticsearch",
      "name": "ElasticSearch专题",
      "questions": [
        {
          "id": 6,
          "title": "ElasticSearch的核心概念？",
          "answer": "【核心概念】\n1. Index：索引，类似数据库\n2. Type：类型，类似表（7.0后废弃）\n3. Document：文档，类似行\n4. Field：字段，类似列\n5. Shard：分片，数据分割单位\n6. Replica：副本，数据备份\n\n【索引操作】\n```json\n// 创建索引\nPUT /users\n{\n  \"settings\": {\n    \"number_of_shards\": 3,\n    \"number_of_replicas\": 1\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"type\": \"text\"\n      },\n      \"age\": {\n        \"type\": \"integer\"\n      },\n      \"email\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n\n// 添加文档\nPOST /users/_doc\n{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"john@example.com\"\n}\n\n// 查询文档\nGET /users/_doc/1\n```\n\n【查询DSL】\n```json\n// 简单查询\nGET /users/_search\n{\n  \"query\": {\n    \"match\": {\n      \"name\": \"John\"\n    }\n  }\n}\n\n// 复合查询\nGET /users/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\"match\": {\"name\": \"John\"}}\n      ],\n      \"filter\": [\n        {\"range\": {\"age\": {\"gte\": 25}}}\n      ]\n    }\n  },\n  \"sort\": [\n    {\"age\": {\"order\": \"desc\"}}\n  ],\n  \"size\": 10,\n  \"from\": 0\n}\n```\n\n【聚合查询】\n```json\nGET /users/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"age_groups\": {\n      \"terms\": {\n        \"field\": \"age\"\n      }\n    },\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"age\"\n      }\n    }\n  }\n}\n```"
        },
        {
          "id": 7,
          "title": "ElasticSearch的集群和分片？",
          "answer": "【集群架构】\n- Master Node：主节点，管理集群\n- Data Node：数据节点，存储数据\n- Coordinating Node：协调节点，处理请求\n- Ingest Node：摄入节点，处理数据\n\n【分片策略】\n```json\n// 创建索引时指定分片数\nPUT /logs\n{\n  \"settings\": {\n    \"number_of_shards\": 5,\n    \"number_of_replicas\": 1\n  }\n}\n\n// 查看分片信息\nGET /_cat/shards/logs?v\n```\n\n【路由机制】\n```json\n// 指定路由\nPOST /logs/_doc?routing=user123\n{\n  \"user_id\": \"user123\",\n  \"message\": \"log message\"\n}\n\n// 查询时指定路由\nGET /logs/_search?routing=user123\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}\n```\n\n【集群健康】\n```json\n// 查看集群健康状态\nGET /_cluster/health\n\n// 查看节点信息\nGET /_cat/nodes?v\n\n// 查看索引信息\nGET /_cat/indices?v\n```\n\n【故障恢复】\n- 自动故障检测\n- 副本自动提升\n- 数据重新平衡\n- 节点自动加入"
        }
      ]
    }
  ]
} 