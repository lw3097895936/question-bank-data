{
  "version": "1.0.0",
  "lastUpdate": "2024-01-15",
  "category": "Git",
  "topics": [
    {
      "id": "basic",
      "name": "基础操作专题",
      "questions": [
        {
          "id": 1,
          "title": "Git的基本工作流程？",
          "answer": "【Git工作流程】\nGit的工作流程主要包含三个区域：\n1. 工作区(Working Directory)：实际文件所在目录\n2. 暂存区(Staging Area)：准备提交的文件\n3. 版本库(Repository)：已提交的历史记录\n\n【基本操作流程】\n```bash\n# 1. 初始化仓库\ngit init\n\n# 2. 添加文件到暂存区\ngit add filename\ngit add .  # 添加所有文件\n\n# 3. 提交到版本库\ngit commit -m \"commit message\"\n\n# 4. 查看状态\ngit status\n\n# 5. 查看提交历史\ngit log\n```\n\n【文件状态】\n- Untracked：未跟踪的文件\n- Modified：已修改但未暂存\n- Staged：已暂存准备提交\n- Committed：已提交到版本库\n\n【常用命令】\n```bash\n# 查看文件状态\ngit status\n\n# 查看文件差异\ngit diff          # 工作区与暂存区差异\ngit diff --cached # 暂存区与版本库差异\n\n# 撤销操作\ngit checkout -- filename  # 撤销工作区修改\ngit reset HEAD filename   # 撤销暂存区修改\n\n# 查看提交历史\ngit log --oneline\ngit log --graph --oneline\n```"
        },
        {
          "id": 2,
          "title": "Git分支管理策略？",
          "answer": "【分支概念】\n- 主分支：master/main，稳定版本\n- 开发分支：develop，开发版本\n- 功能分支：feature/*，新功能开发\n- 修复分支：hotfix/*，紧急修复\n- 发布分支：release/*，版本发布\n\n【分支操作】\n```bash\n# 查看分支\ngit branch\n\n# 创建分支\ngit branch feature/new-feature\n\n# 切换分支\ngit checkout feature/new-feature\ngit switch feature/new-feature  # Git 2.23+\n\n# 创建并切换分支\ngit checkout -b feature/new-feature\n\n# 合并分支\ngit merge feature/new-feature\n\n# 删除分支\ngit branch -d feature/new-feature\n```\n\n【Git Flow工作流】\n```bash\n# 1. 从develop创建功能分支\ngit checkout develop\ngit checkout -b feature/user-login\n\n# 2. 开发完成后合并回develop\ngit checkout develop\ngit merge feature/user-login\n\n# 3. 从develop创建发布分支\ngit checkout -b release/v1.0.0\n\n# 4. 发布分支合并到master和develop\ngit checkout master\ngit merge release/v1.0.0\ngit tag v1.0.0\n\ngit checkout develop\ngit merge release/v1.0.0\n\n# 5. 删除发布分支\ngit branch -d release/v1.0.0\n```\n\n【冲突解决】\n```bash\n# 合并时发生冲突\n<<<<<<< HEAD\n// 当前分支的代码\n=======\n// 要合并分支的代码\n>>>>>>> feature/branch\n\n# 解决冲突后\ngit add filename\ngit commit -m \"resolve merge conflict\"\n```"
        },
        {
          "id": 3,
          "title": "Git远程仓库操作？",
          "answer": "【远程仓库配置】\n```bash\n# 添加远程仓库\ngit remote add origin https://github.com/user/repo.git\n\n# 查看远程仓库\ngit remote -v\n\n# 修改远程仓库地址\ngit remote set-url origin https://github.com/user/new-repo.git\n\n# 删除远程仓库\ngit remote remove origin\n```\n\n【推送和拉取】\n```bash\n# 推送到远程仓库\ngit push origin master\ngit push -u origin master  # 设置上游分支\n\n# 从远程仓库拉取\ngit pull origin master\ngit fetch origin           # 只下载不合并\n\n# 查看远程分支\ngit branch -r\n\n# 创建本地分支跟踪远程分支\ngit checkout -b local-branch origin/remote-branch\n```\n\n【克隆仓库】\n```bash\n# 克隆仓库\ngit clone https://github.com/user/repo.git\n\n# 克隆指定分支\ngit clone -b develop https://github.com/user/repo.git\n\n# 浅克隆（只下载最新提交）\ngit clone --depth 1 https://github.com/user/repo.git\n```\n\n【Fork工作流】\n```bash\n# 1. Fork原仓库到自己的GitHub\n# 2. 克隆自己的Fork\ngit clone https://github.com/your-username/repo.git\n\n# 3. 添加上游仓库\ngit remote add upstream https://github.com/original-user/repo.git\n\n# 4. 同步上游更新\ngit fetch upstream\ngit merge upstream/master\n\n# 5. 推送更新到自己的Fork\ngit push origin master\n```"
        }
      ]
    },
    {
      "id": "advanced",
      "name": "高级操作专题",
      "questions": [
        {
          "id": 4,
          "title": "Git的撤销和回退操作？",
          "answer": "【撤销工作区修改】\n```bash\n# 撤销单个文件\ngit checkout -- filename\n\n# 撤销所有文件\ngit checkout -- .\n\n# Git 2.23+ 使用restore\ngit restore filename\ngit restore .\n```\n\n【撤销暂存区修改】\n```bash\n# 撤销单个文件\ngit reset HEAD filename\n\n# 撤销所有文件\ngit reset HEAD\n\n# Git 2.23+ 使用restore\ngit restore --staged filename\ngit restore --staged .\n```\n\n【撤销提交】\n```bash\n# 撤销最后一次提交（保留修改）\ngit reset --soft HEAD~1\n\n# 撤销最后一次提交（保留修改到暂存区）\ngit reset --mixed HEAD~1\n\n# 撤销最后一次提交（完全删除）\ngit reset --hard HEAD~1\n\n# 创建新提交撤销之前的提交\ngit revert HEAD\n```\n\n【回退到指定版本】\n```bash\n# 查看提交历史\ngit log --oneline\n\n# 回退到指定提交\ngit reset --hard commit-hash\n\n# 回退到指定提交（创建新提交）\ngit revert commit-hash\n```\n\n【恢复删除的分支】\n```bash\n# 查看操作历史\ngit reflog\n\n# 恢复删除的分支\ngit checkout -b recovered-branch commit-hash\n```"
        },
        {
          "id": 5,
          "title": "Git的标签和版本管理？",
          "answer": "【标签类型】\n- 轻量标签：指向特定提交的指针\n- 附注标签：包含标签信息的完整对象\n\n【标签操作】\n```bash\n# 创建轻量标签\ngit tag v1.0.0\n\n# 创建附注标签\ngit tag -a v1.0.0 -m \"Release version 1.0.0\"\n\n# 查看标签\ngit tag\ngit tag -l \"v1.*\"\n\n# 查看标签详情\ngit show v1.0.0\n\n# 删除标签\ngit tag -d v1.0.0\n\n# 推送标签到远程\ngit push origin v1.0.0\ngit push origin --tags  # 推送所有标签\n```\n\n【版本管理策略】\n```bash\n# 语义化版本号\nv主版本.次版本.修订版本\nv1.0.0  # 第一个正式版本\nv1.1.0  # 新功能\nv1.1.1  # 修复bug\nv2.0.0  # 不兼容的API修改\n\n# 预发布版本\nv1.0.0-alpha.1  # 内部测试版\nv1.0.0-beta.1   # 公开测试版\nv1.0.0-rc.1     # 候选发布版\n```\n\n【发布流程】\n```bash\n# 1. 确保代码稳定\ngit checkout master\ngit pull origin master\n\n# 2. 创建发布标签\ngit tag -a v1.0.0 -m \"Release version 1.0.0\"\n\n# 3. 推送标签\ngit push origin v1.0.0\n\n# 4. 在GitHub上创建Release\n# 添加发布说明、下载链接等\n```"
        }
      ]
    }
  ]
} 