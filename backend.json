{
  "version": "1.0.0",
  "lastUpdate": "2024-01-15",
  "category": "后端",
  "topics": [
    {
      "id": "concurrent",
      "name": "高并发专题",
      "questions": [
        {
          "id": 1,
          "title": "说说你对高并发的理解，常见的高并发解决方案有哪些？",
          "answer": "【高并发理解】\n高并发是指系统能够同时处理大量请求的能力，常见于互联网大流量场景。面试时建议从以下几个方面作答：\n1. 概念：不仅仅是QPS高，还包括系统的可扩展性、稳定性和响应速度。\n2. 瓶颈：关注数据库、网络、磁盘IO等。\n【常见解决方案】\n- 读写分离：主从架构分担读写压力。\n- 缓存：Redis/Memcached缓存热点数据，减轻DB压力。\n- 负载均衡：Nginx/LVS分发请求，横向扩展。\n- 异步处理：消息队列削峰填谷，异步写入。\n- 限流与降级：令牌桶、漏桶算法，保护核心服务。\n- 分布式架构：服务拆分、分库分表、分区分片。\n- 资源隔离：线程池、容器等。\n【实际场景】\n- 秒杀系统：缓存预热、限流、异步下单、库存预扣减。\n- 热点新闻/抢购：热点数据提前缓存，接口加限流。\n【代码示例】\n// Redis INCR实现简单限流\nif (redis.incr(key) > limit) { return \"限流\"; }\n【注意点】\n- 缓存一致性、雪崩、击穿、穿透问题。\n- 限流策略要结合业务实际，避免误伤正常用户。"
        },
        {
          "id": 2,
          "title": "如何设计一个高可用的后端系统？",
          "answer": "【高可用设计要点】\n1. 去单点：所有核心组件（如数据库、缓存、服务）都要有主备或集群。\n2. 冗余部署：多机房、多节点部署，提升容灾能力。\n3. 自动故障转移：如主从切换、健康检查自动剔除故障节点。\n4. 数据多副本：如MySQL主从、Redis哨兵、分布式存储。\n5. 服务降级与熔断：防止局部故障影响全局。\n6. 自动扩容：支持弹性伸缩。\n7. 监控报警：实时监控系统健康，自动报警。\n8. 灰度发布与回滚：降低发布风险。\n【实际面试补充】\n- 讲清楚\"无单点、自动切换、数据安全、监控报警\"是大厂高可用的核心。\n- 可举例：Redis主从+哨兵、Nginx+多后端、MySQL主从+VIP漂移。"
        },
        {
          "id": 3,
          "title": "如何实现分布式锁？",
          "answer": "【分布式锁实现方式】\n1. 基于数据库：利用唯一索引或select for update实现，适合低并发。\n2. 基于Redis：setnx+expire实现互斥，Redisson支持可重入锁、读写锁。\n3. 基于ZooKeeper：临时顺序节点+watch机制，天然支持锁失效。\n【代码示例】\n// Redis实现分布式锁\nSET resource_name my_random_value NX PX 30000\n【注意点】\n- 锁的可重入性、超时释放、避免死锁、锁粒度设计。\n- Redis锁要保证原子性和唯一性，避免误删。"
        },
        {
          "id": 4,
          "title": "如何做接口限流？常见限流算法有哪些？",
          "answer": "【限流算法】\n1. 令牌桶算法：按速率生成令牌，请求需获取令牌。\n2. 漏桶算法：请求按固定速率流出，平滑突发流量。\n3. 固定窗口/滑动窗口计数器：统计单位时间内请求数。\n【实现方式】\n- Nginx限流模块、Redis原子自增、网关限流、服务端中间件。\n【实际场景】\n- 秒杀、抢购、API接口防刷。\n【注意点】\n- 限流要结合业务实际，防止误伤正常用户。"
        },
        {
          "id": 5,
          "title": "如何设计一个秒杀系统？",
          "answer": "【秒杀系统设计要点】\n1. 限流与削峰：网关限流、队列排队、令牌桶。\n2. 异步下单：请求入队，异步处理订单。\n3. 库存预扣减：Redis原子操作，防止超卖。\n4. 幂等校验：防止重复下单。\n5. 分布式锁：保证同一用户/商品并发安全。\n6. 消息队列：削峰填谷，异步处理。\n7. 热点数据缓存：商品信息、库存放入缓存。\n8. 数据库分库分表：提升写入性能。\n9. 安全防刷：验证码、动态令牌、IP限流。\n【实际面试补充】\n- 秒杀系统核心是\"限流+异步+原子扣减+幂等+防刷\"。"
        }
      ]
    },
    {
      "id": "distributed",
      "name": "分布式系统专题",
      "questions": [
        {
          "id": 6,
          "title": "分布式系统中如何保证数据一致性？",
          "answer": "常见一致性方案：\n1. 强一致性：如2PC、3PC、Paxos、Raft等分布式一致性协议。\n2. 最终一致性：如BASE理论，允许短暂不一致，最终达到一致。\n3. 分布式事务：TCC、SAGA、消息事务等。\n4. 业务补偿：失败后通过补偿操作修正数据。\n实际应用中需权衡一致性与可用性。"
        },
        {
          "id": 7,
          "title": "分布式系统中的CAP理论是什么？",
          "answer": "CAP理论：\n- 一致性（Consistency）：所有节点数据一致。\n- 可用性（Availability）：每次请求都能获得响应。\n- 分区容错性（Partition tolerance）：系统能应对网络分区。\n分布式系统只能同时满足其中两项，常见如CA（单机数据库）、CP（ZK）、AP（Cassandra）。"
        },
        {
          "id": 8,
          "title": "如何实现分布式ID生成？",
          "answer": "常见方案：\n1. 数据库自增ID：简单但有单点瓶颈。\n2. UUID：无序、长度长。\n3. 雪花算法（Snowflake）：高性能、趋势递增，常用于订单号等。\n4. Redis自增：INCR命令。\n5. 号段模式：预分配ID段。\n需保证全局唯一、高性能、趋势递增。"
        },
        {
          "id": 9,
          "title": "如何做分布式事务？",
          "answer": "分布式事务方案：\n1. 两阶段提交（2PC）：协调者通知所有参与者提交/回滚。\n2. 三阶段提交（3PC）：在2PC基础上增加超时机制。\n3. TCC：Try-Confirm-Cancel三步，业务可控。\n4. SAGA：长事务拆分为本地事务+补偿。\n5. 消息最终一致性：通过消息队列保证。\n实际应用需结合业务场景选择。"
        },
        {
          "id": 10,
          "title": "如何实现分布式Session？",
          "answer": "分布式Session方案：\n1. 共享存储：如Redis集中存储Session。\n2. Cookie/JWT：无状态方案，Session信息存于客户端。\n3. Session复制：各节点间同步Session。\n推荐使用Redis等高可用缓存。"
        }
      ]
    },
    {
      "id": "microservice",
      "name": "微服务专题",
      "questions": [
        {
          "id": 11,
          "title": "微服务架构的优缺点？如何进行服务拆分？",
          "answer": "优点：\n- 技术栈灵活，独立部署，易于扩展。\n- 单一服务故障影响小。\n缺点：\n- 运维复杂，分布式一致性难。\n- 服务间通信、链路追踪、监控难度大。\n服务拆分建议：按业务边界、团队边界、数据一致性、服务粒度等。"
        },
        {
          "id": 12,
          "title": "如何做服务注册与发现？",
          "answer": "常用注册中心：Eureka、Consul、ZooKeeper等。\n服务启动时注册到注册中心，消费者通过注册中心获取服务地址，实现动态发现。"
        },
        {
          "id": 13,
          "title": "如何做服务降级与熔断？",
          "answer": "服务降级：当依赖服务不可用时，返回默认值或降级处理。\n熔断：如Hystrix、Sentinel，监控失败率，自动断开故障服务，防止雪崩。\n恢复后自动半开试探。"
        },
        {
          "id": 14,
          "title": "如何做灰度发布与A/B测试？",
          "answer": "灰度发布：逐步将新版本流量引入，降低风险。\nA/B测试：将用户分组，分别体验不同方案，评估效果。\n可用Nginx、服务网格、网关等实现流量分配。"
        },
        {
          "id": 15,
          "title": "微服务架构下的服务治理？",
          "answer": "服务治理包括：\n- 服务注册与发现\n- 配置中心\n- 链路追踪\n- 限流熔断\n- 监控报警\n- 日志采集\n- 安全认证\n常用组件：Spring Cloud、Dubbo、Istio等。"
        }
      ]
    },
    {
      "id": "cache",
      "name": "缓存专题",
      "questions": [
        {
          "id": 16,
          "title": "常见的缓存穿透、击穿、雪崩场景及解决方案？",
          "answer": "缓存穿透：查询不存在的数据，建议缓存空对象。\n缓存击穿：热点key失效瞬间大量请求打到DB，建议加互斥锁。\n缓存雪崩：大量key同时失效，建议加随机过期、分批重建、限流。"
        },
        {
          "id": 17,
          "title": "如何设计高可用的分布式缓存系统？",
          "answer": "高可用缓存设计：\n- 主从复制、哨兵、集群模式\n- 数据持久化（RDB/AOF）\n- 故障自动切换\n- 热点数据分离\n- 多级缓存（本地+分布式）\n- 监控与报警"
        },
        {
          "id": 18,
          "title": "如何保证消息队列的可靠性？",
          "answer": "消息队列可靠性：\n- 持久化存储\n- ACK确认机制\n- 消息重试与补偿\n- 死信队列\n- 幂等消费\n- 消息顺序保证"
        },
        {
          "id": 19,
          "title": "如何做接口幂等性校验？",
          "answer": "幂等性校验方案：\n- 唯一请求ID（如token）\n- 数据库唯一索引\n- 乐观锁\n- 幂等表记录\n- 状态机校验"
        }
      ]
    },
    {
      "id": "security",
      "name": "安全与监控专题",
      "questions": [
        {
          "id": 20,
          "title": "如何做接口安全防护？",
          "answer": "接口安全措施：\n- 身份认证（如OAuth2、JWT）\n- 权限校验\n- 参数校验与过滤\n- 签名机制\n- 限流防刷\n- 防重放攻击\n- HTTPS加密传输"
        },
        {
          "id": 21,
          "title": "如何做日志采集与追踪？",
          "answer": "日志采集：ELK、Fluentd等集中采集。\n链路追踪：SkyWalking、Jaeger、Zipkin等。\n埋点采集、统一日志格式、全链路追踪。"
        },
        {
          "id": 22,
          "title": "如何做系统监控与报警？",
          "answer": "监控：Prometheus、Zabbix、Grafana等。\n监控指标：CPU、内存、QPS、延迟、错误率。\n报警：钉钉、短信、邮件等多渠道通知。"
        },
        {
          "id": 23,
          "title": "如何做接口文档自动化？",
          "answer": "自动化文档工具：Swagger、OpenAPI、Postman等。\n通过注解或接口定义自动生成文档，支持在线调试。"
        },
        {
          "id": 24,
          "title": "如何做分布式定时任务？",
          "answer": "分布式定时任务框架：xxl-job、Quartz、ElasticJob等。\n支持任务分片、故障转移、任务持久化、监控报警。"
        },
        {
          "id": 25,
          "title": "如何设计一个高性能的API网关？",
          "answer": "高性能API网关需具备：\n- 高并发处理能力\n- 负载均衡\n- 缓存\n- 限流与熔断\n- 鉴权与安全\n- 监控与日志\n- 插件化扩展\n常用网关：Kong、Nginx、Spring Cloud Gateway等。"
        }
      ]
    }
  ]
} 