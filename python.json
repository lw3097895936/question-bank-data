{
  "version": "1.0.0",
  "lastUpdate": "2024-01-15",
  "category": "Python",
  "topics": [
    {
      "id": "basic",
      "name": "基础语法专题",
      "questions": [
        {
          "id": 1,
          "title": "Python中的列表和元组的区别？",
          "answer": "【列表(List)特点】\n- 可变序列：可以修改、添加、删除元素\n- 使用方括号[]定义\n- 支持索引、切片操作\n- 内存占用较大\n\n【元组(Tuple)特点】\n- 不可变序列：创建后不能修改\n- 使用圆括号()定义\n- 支持索引、切片操作\n- 内存占用较小\n\n【性能对比】\n- 创建速度：元组 > 列表\n- 访问速度：元组 > 列表\n- 内存占用：元组 < 列表\n\n【使用场景】\n- 列表：需要频繁修改的数据\n- 元组：固定数据、字典键、函数返回值\n\n【代码示例】\n```python\n# 列表 - 可变\nlist_example = [1, 2, 3, 4, 5]\nlist_example.append(6)  # 可以修改\nlist_example[0] = 10   # 可以修改\n\n# 元组 - 不可变\ntuple_example = (1, 2, 3, 4, 5)\n# tuple_example[0] = 10  # 错误！不能修改\n# tuple_example.append(6)  # 错误！没有append方法\n\n# 元组作为字典键\ncoordinates = {(1, 2): \"point1\", (3, 4): \"point2\"}\n\n# 函数返回多个值\ndef get_name_age():\n    return \"Alice\", 25\n\nname, age = get_name_age()  # 返回元组\n```"
        },
        {
          "id": 2,
          "title": "Python中的装饰器原理？",
          "answer": "【装饰器原理】\n装饰器是一个函数，它接受一个函数作为参数，并返回一个新的函数。\n\n【基本语法】\n```python\n@decorator\ndef function():\n    pass\n\n# 等价于\nfunction = decorator(function)\n```\n\n【简单装饰器】\n```python\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        import time\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"{func.__name__} took {end - start} seconds\")\n        return result\n    return wrapper\n\n@timer\ndef slow_function():\n    import time\n    time.sleep(1)\n    return \"Done\"\n\n# 使用\nresult = slow_function()\n```\n\n【带参数的装饰器】\n```python\ndef repeat(times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\n# 使用\ngreet(\"Alice\")  # 打印3次\n```\n\n【类装饰器】\n```python\nclass Logger:\n    def __init__(self, func):\n        self.func = func\n        self.count = 0\n    \n    def __call__(self, *args, **kwargs):\n        self.count += 1\n        print(f\"Calling {self.func.__name__} for the {self.count} time\")\n        return self.func(*args, **kwargs)\n\n@Logger\ndef hello():\n    print(\"Hello, World!\")\n\n# 使用\nhello()  # 输出调用次数\nhello()  # 输出调用次数\n```\n\n【functools.wraps】\n```python\nfrom functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)  # 保持原函数的元数据\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n\n@my_decorator\ndef example():\n    \"\"\"This is a docstring.\"\"\"\n    pass\n\nprint(example.__name__)  # 输出 'example' 而不是 'wrapper'\nprint(example.__doc__)   # 输出文档字符串\n```"
        },
        {
          "id": 3,
          "title": "Python中的生成器和迭代器？",
          "answer": "【迭代器(Iterator)】\n- 实现了__iter__()和__next__()方法的对象\n- 可以逐个访问集合中的元素\n- 只能前进，不能后退\n\n【生成器(Generator)】\n- 使用yield关键字创建的特殊迭代器\n- 延迟计算，节省内存\n- 可以暂停和恢复执行\n\n【生成器函数】\n```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# 使用生成器\nfor num in fibonacci(10):\n    print(num, end=\" \")\n# 输出: 0 1 1 2 3 5 8 13 21 34\n```\n\n【生成器表达式】\n```python\n# 列表推导式 - 立即计算\nsquares_list = [x**2 for x in range(1000000)]  # 占用大量内存\n\n# 生成器表达式 - 延迟计算\nsquares_gen = (x**2 for x in range(1000000))   # 占用很少内存\n\n# 使用\nfor square in squares_gen:\n    if square > 100:\n        break\n    print(square)\n```\n\n【send()方法】\n```python\ndef counter():\n    count = 0\n    while True:\n        received = yield count\n        if received is not None:\n            count = received\n        else:\n            count += 1\n\n# 使用\nc = counter()\nnext(c)  # 启动生成器\nprint(c.send(10))  # 发送值给生成器\nprint(next(c))     # 继续执行\n```\n\n【内存优势】\n```python\n# 传统方式 - 占用大量内存\ndef get_large_list():\n    return [i for i in range(10000000)]\n\n# 生成器方式 - 占用很少内存\ndef get_large_generator():\n    for i in range(10000000):\n        yield i\n\n# 使用\nlarge_list = get_large_list()      # 占用大量内存\nlarge_gen = get_large_generator()  # 占用很少内存\n```"
        }
      ]
    },
    {
      "id": "advanced",
      "name": "高级特性专题",
      "questions": [
        {
          "id": 4,
          "title": "Python中的上下文管理器？",
          "answer": "【上下文管理器】\n上下文管理器用于管理资源的获取和释放，使用with语句。\n\n【基本语法】\n```python\nwith context_manager() as variable:\n    # 使用资源\n    pass\n# 自动释放资源\n```\n\n【内置上下文管理器】\n```python\n# 文件操作\nwith open('file.txt', 'r') as f:\n    content = f.read()\n# 文件自动关闭\n\n# 锁操作\nimport threading\nlock = threading.Lock()\n\nwith lock:\n    # 临界区代码\n    pass\n# 锁自动释放\n```\n\n【自定义上下文管理器】\n```python\n# 方法1：使用类\nclass Timer:\n    def __init__(self, name):\n        self.name = name\n    \n    def __enter__(self):\n        import time\n        self.start = time.time()\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        import time\n        self.end = time.time()\n        print(f\"{self.name} took {self.end - self.start} seconds\")\n\n# 使用\nwith Timer(\"my_function\"):\n    import time\n    time.sleep(1)\n```\n\n【使用contextlib】\n```python\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer(name):\n    import time\n    start = time.time()\n    yield\n    end = time.time()\n    print(f\"{name} took {end - start} seconds\")\n\n# 使用\nwith timer(\"my_function\"):\n    import time\n    time.sleep(1)\n```\n\n【异常处理】\n```python\nclass DatabaseConnection:\n    def __enter__(self):\n        print(\"Connecting to database...\")\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"Closing database connection...\")\n        if exc_type is not None:\n            print(f\"Exception occurred: {exc_val}\")\n        return False  # 不抑制异常\n\n# 使用\nwith DatabaseConnection() as db:\n    # 数据库操作\n    pass\n# 自动关闭连接\n```"
        },
        {
          "id": 5,
          "title": "Python中的元类和类装饰器？",
          "answer": "【元类(Metaclass)】\n元类是创建类的类，type是Python的内置元类。\n\n【基本概念】\n```python\n# 普通类定义\nclass MyClass:\n    pass\n\n# 等价于\nMyClass = type('MyClass', (), {})\n```\n\n【自定义元类】\n```python\nclass MetaLogger(type):\n    def __new__(cls, name, bases, attrs):\n        # 在类创建时添加日志功能\n        print(f\"Creating class: {name}\")\n        return super().__new__(cls, name, bases, attrs)\n    \n    def __init__(cls, name, bases, attrs):\n        print(f\"Initializing class: {name}\")\n        super().__init__(name, bases, attrs)\n\n# 使用元类\nclass MyClass(metaclass=MetaLogger):\n    pass\n```\n\n【单例模式元类】\n```python\nclass Singleton(type):\n    _instances = {}\n    \n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Database(metaclass=Singleton):\n    def __init__(self):\n        print(\"Creating database connection...\")\n\n# 使用\ndb1 = Database()\ndb2 = Database()\nprint(db1 is db2)  # True\n```\n\n【类装饰器】\n```python\ndef singleton(cls):\n    instances = {}\n    \n    def get_instance(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n    \n    return get_instance\n\n@singleton\nclass Database:\n    def __init__(self):\n        print(\"Creating database connection...\")\n\n# 使用\ndb1 = Database()\ndb2 = Database()\nprint(db1 is db2)  # True\n```\n\n【属性验证元类】\n```python\nclass Validator(type):\n    def __new__(cls, name, bases, attrs):\n        # 检查是否有必需的属性\n        if 'required_attrs' in attrs:\n            for attr in attrs['required_attrs']:\n                if attr not in attrs:\n                    raise AttributeError(f\"Missing required attribute: {attr}\")\n        return super().__new__(cls, name, bases, attrs)\n\nclass MyClass(metaclass=Validator):\n    required_attrs = ['name', 'age']\n    name = 'John'\n    age = 30\n```"
        }
      ]
    }
  ]
} 